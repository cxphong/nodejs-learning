(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.workerTimersBroker = global.workerTimersBroker || {})));
}(this, (function (exports) { 'use strict';

var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
var generateUniqueId = function generateUniqueId(map) {
    var id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    while (map.has(id)) {
        id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    }
    return id;
};
var load = function load(url) {
    var scheduledIntervalFunctions = new Map();
    var scheduledTimeoutFunctions = new Map();
    var worker = new Worker(url);
    worker.addEventListener('message', function (_ref) {
        var _ref$data = _ref.data,
            id = _ref$data.id,
            type = _ref$data.type;

        if (type === 'interval') {
            var func = scheduledIntervalFunctions.get(id);
            if (func) {
                func();
            }
        } else if (type === 'timeout') {
            var _func = scheduledTimeoutFunctions.get(id);
            if (_func) {
                _func();
                // A timeout can be savely deleted because it is only called once.
                scheduledTimeoutFunctions.delete(id);
            }
        }
        // @todo Maybe throw an error.
    });
    var clearInterval = function clearInterval(id) {
        scheduledIntervalFunctions.delete(id);
        worker.postMessage({
            action: 'clear',
            id: id,
            type: 'interval'
        });
    };
    var clearTimeout = function clearTimeout(id) {
        scheduledTimeoutFunctions.delete(id);
        worker.postMessage({
            action: 'clear',
            id: id,
            type: 'timeout'
        });
    };
    var setInterval = function setInterval(func, delay) {
        var id = generateUniqueId(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(id, function () {
            func();
            worker.postMessage({
                action: 'set',
                delay: delay,
                id: id,
                now: performance.now(),
                type: 'interval'
            });
        });
        worker.postMessage({
            action: 'set',
            delay: delay,
            id: id,
            now: performance.now(),
            type: 'interval'
        });
        return id;
    };
    var setTimeout = function setTimeout(func, delay) {
        var id = generateUniqueId(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(id, func);
        worker.postMessage({
            action: 'set',
            delay: delay,
            id: id,
            now: performance.now(),
            type: 'timeout'
        });
        return id;
    };
    return {
        clearInterval: clearInterval,
        clearTimeout: clearTimeout,
        setInterval: setInterval,
        setTimeout: setTimeout
    };
};

exports.load = load;

Object.defineProperty(exports, '__esModule', { value: true });

})));
