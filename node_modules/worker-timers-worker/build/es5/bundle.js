(function () {
'use strict';

var scheduledIntervalIdentifiers = new Map();
var scheduledTimeoutIdentifiers = new Map();
var setTimeoutCallback = function setTimeoutCallback(identifiers, id, expected, type) {
    var now = 'performance' in self ? performance.now() : Date.now();
    if (now > expected) {
        postMessage({ id: id, type: type });
    } else {
        identifiers.set(id, setTimeout(setTimeoutCallback, expected - now, identifiers, id, expected, type));
    }
};
addEventListener('message', function (_ref) {
    var _ref$data = _ref.data,
        action = _ref$data.action,
        delay = _ref$data.delay,
        id = _ref$data.id,
        nowInMainThread = _ref$data.now,
        type = _ref$data.type;

    if (action === 'clear') {
        var identifier = void 0;
        if (type === 'interval') {
            identifier = scheduledIntervalIdentifiers.get(id);
            if (identifier !== undefined) {
                clearTimeout(identifier);
                scheduledIntervalIdentifiers.delete(id);
            }
        } else if (type === 'timeout') {
            identifier = scheduledTimeoutIdentifiers.get(id);
            if (identifier !== undefined) {
                clearTimeout(identifier);
                scheduledTimeoutIdentifiers.delete(id);
            }
        }
        // @todo Maybe throw an error.
    } else if (action === 'set') {
        var now = void 0;
        if ('performance' in self) {
            var nowInWorker = performance.now();
            var elapsed = Math.max(0, nowInWorker - nowInMainThread);
            delay -= elapsed;
            now = nowInWorker;
        } else {
            now = Date.now();
        }
        var expected = now + delay;
        if (type === 'interval') {
            scheduledIntervalIdentifiers.set(id, setTimeout(setTimeoutCallback, delay, scheduledIntervalIdentifiers, id, expected, type));
        } else if (type === 'timeout') {
            scheduledTimeoutIdentifiers.set(id, setTimeout(setTimeoutCallback, delay, scheduledTimeoutIdentifiers, id, expected, type));
        }
        // @todo Maybe throw an error.
    }
    // @todo Maybe throw an error.
});

}());
