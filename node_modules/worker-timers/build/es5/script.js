(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.workerTimers = global.workerTimers || {})));
}(this, (function (exports) { 'use strict';

var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
var generateUniqueId = function generateUniqueId(map) {
    var id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    while (map.has(id)) {
        id = Math.round(Math.random() * MAX_SAFE_INTEGER);
    }
    return id;
};
var load = function load(url) {
    var scheduledIntervalFunctions = new Map();
    var scheduledTimeoutFunctions = new Map();
    var worker = new Worker(url);
    worker.addEventListener('message', function (_ref) {
        var _ref$data = _ref.data,
            id = _ref$data.id,
            type = _ref$data.type;

        if (type === 'interval') {
            var func = scheduledIntervalFunctions.get(id);
            if (func) {
                func();
            }
        } else if (type === 'timeout') {
            var _func = scheduledTimeoutFunctions.get(id);
            if (_func) {
                _func();
                // A timeout can be savely deleted because it is only called once.
                scheduledTimeoutFunctions.delete(id);
            }
        }
        // @todo Maybe throw an error.
    });
    var clearInterval = function clearInterval(id) {
        scheduledIntervalFunctions.delete(id);
        worker.postMessage({
            action: 'clear',
            id: id,
            type: 'interval'
        });
    };
    var clearTimeout = function clearTimeout(id) {
        scheduledTimeoutFunctions.delete(id);
        worker.postMessage({
            action: 'clear',
            id: id,
            type: 'timeout'
        });
    };
    var setInterval = function setInterval(func, delay) {
        var id = generateUniqueId(scheduledIntervalFunctions);
        scheduledIntervalFunctions.set(id, function () {
            func();
            worker.postMessage({
                action: 'set',
                delay: delay,
                id: id,
                now: performance.now(),
                type: 'interval'
            });
        });
        worker.postMessage({
            action: 'set',
            delay: delay,
            id: id,
            now: performance.now(),
            type: 'interval'
        });
        return id;
    };
    var setTimeout = function setTimeout(func, delay) {
        var id = generateUniqueId(scheduledTimeoutFunctions);
        scheduledTimeoutFunctions.set(id, func);
        worker.postMessage({
            action: 'set',
            delay: delay,
            id: id,
            now: performance.now(),
            type: 'timeout'
        });
        return id;
    };
    return {
        clearInterval: clearInterval,
        clearTimeout: clearTimeout,
        setInterval: setInterval,
        setTimeout: setTimeout
    };
};

// tslint:disable-next-line:max-line-length
// tslint:disable-next-line:max-line-length
var worker = "!function(){\"use strict\";var a=new Map,b=new Map,c=function a(b,c,d,e){var f=\"performance\"in self?performance.now():Date.now();f>d?postMessage({id:c,type:e}):b.set(c,setTimeout(a,d-f,b,c,d,e))};addEventListener(\"message\",function(d){var e=d.data,f=e.action,g=e.delay,h=e.id,i=e.now,j=e.type;if(\"clear\"===f){var k=void 0;\"interval\"===j?(k=a.get(h),void 0!==k&&(clearTimeout(k),a.delete(h))):\"timeout\"===j&&(k=b.get(h),void 0!==k&&(clearTimeout(k),b.delete(h)))}else if(\"set\"===f){var l=void 0;if(\"performance\"in self){var m=performance.now(),n=Math.max(0,m-i);g-=n,l=m}else l=Date.now();var o=l+g;\"interval\"===j?a.set(h,setTimeout(c,g,a,h,o,j)):\"timeout\"===j&&b.set(h,setTimeout(c,g,b,h,o,j))}})}();";

var blob = new Blob([worker], { type: 'application/javascript' });
var url = URL.createObjectURL(blob);
var workerTimers = load(url);
var clearInterval = workerTimers.clearInterval;
var clearTimeout = workerTimers.clearTimeout;
var setInterval = workerTimers.setInterval;
var setTimeout = workerTimers.setTimeout;

exports.clearInterval = clearInterval;
exports.clearTimeout = clearTimeout;
exports.setInterval = setInterval;
exports.setTimeout = setTimeout;

Object.defineProperty(exports, '__esModule', { value: true });

})));
